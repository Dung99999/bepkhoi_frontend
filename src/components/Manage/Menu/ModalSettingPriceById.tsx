import React, { useState, useEffect } from "react";
import { Modal, InputNumber, Form, Button, message } from "antd";

interface ModalSettingPriceProps {
  open: boolean;
  product: {
    productId: number;
    productName: string;
    costPrice: number;
    sellPrice: number;
    salePrice: number;
    productVat: number;
  } | null;
  onClose: () => void;
  onReload: () => void;
}

const ModalSettingPriceById: React.FC<ModalSettingPriceProps> = ({
  open,
  product,
  onClose,
  onReload,
}) => {
  const [sellPrice, setSellPrice] = useState<number>(0);
  const [salePrice, setSalePrice] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    if (product) {
      setSellPrice(product.sellPrice);
      setSalePrice(product.salePrice);
    }
  }, [product]);

  const handleUpdatePrice = async () => {
    if (!product) return;

    // Ki·ªÉm tra "ƒê∆°n gi√°"
    if (!sellPrice || sellPrice <= 0) {
      message.error("ƒê∆°n gi√° l√† b·∫Øt bu·ªôc v√† ph·∫£i l·ªõn h∆°n 0!");
      return;
    }
    if (sellPrice < product.costPrice) {
      message.error("ƒê∆°n gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng gi√° v·ªën!");
      return;
    }

    // N·∫øu "Gi√° sau KM" kh√¥ng ƒë∆∞·ª£c nh·∫≠p, g√°n b·∫±ng "ƒê∆°n gi√°"
    const finalSalePrice = salePrice || sellPrice;

    // Ki·ªÉm tra "Gi√° sau KM"
    if (finalSalePrice <= 0) {
      message.error("Gi√° sau KM ph·∫£i l·ªõn h∆°n 0!");
      return;
    }
    if (finalSalePrice < product.costPrice || finalSalePrice > sellPrice) {
      message.error("Gi√° sau KM ph·∫£i n·∫±m trong kho·∫£ng t·ª´ gi√° v·ªën ƒë·∫øn ƒë∆°n gi√°!");
      return;
    }

    setLoading(true);
    const requestData = {
      productId: product.productId,
      costPrice: product.costPrice,
      sellPrice: sellPrice,
      salePrice: finalSalePrice,
      productVat: product.productVat ?? 10,
    };

    try {
      console.log("üõ† G·ª≠i d·ªØ li·ªáu API:", requestData);

      const response = await fetch(
        `https://localhost:7257/api/Menu/update-price/${product.productId}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(requestData),
        }
      );

      const responseData = await response.json();
      console.log("üì© API Response:", response.status, responseData);

      if (response.ok) {
        message.success("C·∫≠p nh·∫≠t gi√° th√†nh c√¥ng!");
        onClose();
        onReload();
      } else {
        message.error(
          responseData.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i, th·ª≠ l·∫°i sau!"
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ªçi API:", error);
      message.error("L·ªói khi c·∫≠p nh·∫≠t gi√°!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title={product ? `C·∫≠p nh·∫≠t gi√°: ${product.productName}` : "C·∫≠p nh·∫≠t gi√°"}
      open={open}
      onCancel={onClose}
      footer={[
        <Button
          key="submit"
          type="primary"
          loading={loading}
          onClick={handleUpdatePrice}
          style={{
            backgroundColor: "#4096FF",
            border: "none",
          }}
        >
          L∆∞u
        </Button>,
        <Button key="cancel" onClick={onClose}>
          H·ªßy
        </Button>,
      ]}
    >
      {product ? (
        <Form layout="vertical">
          <Form.Item label="Gi√° v·ªën">
            <InputNumber
              value={product.costPrice}
              disabled
              style={{ width: "100%" }}
            />
          </Form.Item>
          <Form.Item
            label="ƒê∆°n gi√°"
            validateStatus={
              !sellPrice || sellPrice <= 0 || sellPrice < product.costPrice
                ? "error"
                : ""
            }
            help={
              !sellPrice || sellPrice <= 0
                ? "ƒê∆°n gi√° l√† b·∫Øt bu·ªôc v√† ph·∫£i l·ªõn h∆°n 0"
                : sellPrice < product.costPrice
                ? "ƒê∆°n gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng gi√° v·ªën"
                : ""
            }
          >
            <InputNumber
              min={0}
              value={sellPrice}
              onChange={(value) => setSellPrice(value ?? 0)}
              style={{ width: "100%" }}
            />
          </Form.Item>
          <Form.Item
            label="Gi√° sau KM"
            validateStatus={
              salePrice &&
              (salePrice <= 0 ||
                salePrice < product.costPrice ||
                salePrice > sellPrice)
                ? "error"
                : ""
            }
            help={
              salePrice && salePrice <= 0
                ? "Gi√° sau KM ph·∫£i l·ªõn h∆°n 0"
                : salePrice &&
                  (salePrice < product.costPrice || salePrice > sellPrice)
                ? "Gi√° sau KM ph·∫£i n·∫±m trong kho·∫£ng t·ª´ gi√° v·ªën ƒë·∫øn ƒë∆°n gi√°"
                : ""
            }
          >
            <InputNumber
              min={0}
              value={salePrice}
              onChange={(value) => setSalePrice(value ?? 0)}
              style={{ width: "100%" }}
            />
          </Form.Item>
        </Form>
      ) : (
        <p>Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m.</p>
      )}
    </Modal>
  );
};

export default ModalSettingPriceById;
